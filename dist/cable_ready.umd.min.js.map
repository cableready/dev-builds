{"version":3,"file":"cable_ready.umd.min.js","sources":["../javascript/enums.js","../javascript/active_element.js","../javascript/utils.js","../javascript/morph_callbacks.js","../javascript/operations.js","../javascript/operation_store.js","../javascript/cable_ready.js","../javascript/cable_consumer.js","../javascript/elements/subscribing_element.js","../javascript/elements/stream_from_element.js","../javascript/elements/updates_for_element.js","../javascript/updatable/inner_updates_compat.js","../javascript/index.js","../javascript/elements/index.js"],"sourcesContent":["export const inputTags = {\n  INPUT: true,\n  TEXTAREA: true,\n  SELECT: true\n}\n\nexport const mutableTags = {\n  INPUT: true,\n  TEXTAREA: true,\n  OPTION: true\n}\n\nexport const textInputTypes = {\n  'datetime-local': true,\n  'select-multiple': true,\n  'select-one': true,\n  color: true,\n  date: true,\n  datetime: true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  textarea: true,\n  time: true,\n  url: true,\n  week: true\n}\n","let activeElement\n\nexport default {\n  get element () {\n    return activeElement\n  },\n  set (element) {\n    activeElement = element\n  }\n}\n","import { inputTags, textInputTypes } from './enums'\nimport ActiveElement from './active_element'\n\n// Indicates if the passed element is considered a text input.\n//\nconst isTextInput = element => {\n  return inputTags[element.tagName] && textInputTypes[element.type]\n}\n\n// Assigns focus to the appropriate element... preferring the explicitly passed selector\n//\n// * selector - a CSS selector for the element that should have focus\n//\nconst assignFocus = selector => {\n  const element =\n    selector && selector.nodeType === Node.ELEMENT_NODE\n      ? selector\n      : document.querySelector(selector)\n  const focusElement = element || ActiveElement.element\n  if (focusElement && focusElement.focus) focusElement.focus()\n}\n\n// Dispatches an event on the passed element\n//\n// * element - the element\n// * name - the name of the event\n// * detail - the event detail\n//\nconst dispatch = (element, name, detail = {}) => {\n  const init = { bubbles: true, cancelable: true, detail: detail }\n  const evt = new CustomEvent(name, init)\n  element.dispatchEvent(evt)\n  if (window.jQuery) window.jQuery(element).trigger(name, detail)\n}\n\n// Accepts an xPath query and returns the element found at that position in the DOM\n//\nconst xpathToElement = xpath => {\n  return document.evaluate(\n    xpath,\n    document,\n    null,\n    XPathResult.FIRST_ORDERED_NODE_TYPE,\n    null\n  ).singleNodeValue\n}\n\n// Accepts an xPath query and returns all matching elements in the DOM\n//\nconst xpathToElementArray = xpath => {\n  const result = document.evaluate(\n    xpath,\n    document,\n    null,\n    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n  const elements = []\n  for (let i = 0; i < result.snapshotLength; i++)\n    elements.push(result.snapshotItem(i))\n  return elements\n}\n\n// Return an array with the class names to be used\n//\n// * names - could be a string or an array of strings for multiple classes.\n//\nconst getClassNames = names => Array.from(names).flat()\n\n// Perform operation for either the first or all of the elements returned by CSS selector\n//\n// * operation - the instruction payload from perform\n// * callback - the operation function to run for each element\n//\nconst processElements = (operation, callback) => {\n  Array.from(\n    operation.selectAll ? operation.element : [operation.element]\n  ).forEach(callback)\n}\n\n// camelCase to kebab-case\n//\nconst kebabize = str => {\n  return str\n    .split('')\n    .map((letter, idx) => {\n      return letter.toUpperCase() === letter\n        ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\n        : letter\n    })\n    .join('')\n}\n\n// Provide a standardized pipeline of checks and modifications to all operations based on provided options\n// Currently skips execution if cancelled and implements an optional delay\n//\nconst operate = (operation, callback) => {\n  if (!operation.cancel) {\n    operation.delay ? setTimeout(callback, operation.delay) : callback()\n    return true\n  }\n  return false\n}\n\n// Dispatch life-cycle events with standardized naming\nconst before = (target, operation) =>\n  dispatch(\n    target,\n    `cable-ready:before-${kebabize(operation.operation)}`,\n    operation\n  )\n\nconst after = (target, operation) =>\n  dispatch(\n    target,\n    `cable-ready:after-${kebabize(operation.operation)}`,\n    operation\n  )\n\nfunction debounce (func, timeout) {\n  let timer\n  return (...args) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => func.apply(this, args), timeout)\n  }\n}\n\nfunction handleErrors (response) {\n  if (!response.ok) throw Error(response.statusText)\n  return response\n}\n\nfunction safeString (str) {\n  if (typeof str !== 'string') {\n    console.warn(`Operation requires a String, but got ${str} (${typeof str})`)\n    return ''\n  }\n  return str != null ? String(str) : ''\n}\n\nfunction safeArray (arr) {\n  if (!Array.isArray(arr)) {\n    console.warn(`Operation requires an Array, but got ${arr} (${typeof arr})`)\n    return []\n  }\n  return arr != null ? Array.from(arr) : []\n}\n\nfunction safeObject (obj) {\n  if (typeof obj !== 'object') {\n    console.warn(`Operation requires an Object, but got ${obj} (${typeof obj})`)\n    return {}\n  }\n  return obj != null ? Object(obj) : {}\n}\n\n// A proxy method to wrap a fetch call in error handling\n//\n// * url - the URL to fetch\n// * additionalHeaders - an object of additional headers passed to fetch\n//\nasync function graciouslyFetch (url, additionalHeaders) {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'X-REQUESTED-WITH': 'XmlHttpRequest',\n        ...additionalHeaders\n      }\n    })\n    if (response == undefined) return\n\n    handleErrors(response)\n\n    return response\n  } catch (e) {\n    console.error(`Could not fetch ${url}`)\n  }\n}\n\nexport {\n  isTextInput,\n  assignFocus,\n  dispatch,\n  xpathToElement,\n  xpathToElementArray,\n  getClassNames,\n  processElements,\n  operate,\n  before,\n  after,\n  debounce,\n  handleErrors,\n  graciouslyFetch,\n  kebabize,\n  safeString,\n  safeArray,\n  safeObject\n}\n","import { mutableTags } from './enums'\nimport { isTextInput } from './utils'\nimport ActiveElement from './active_element'\n\n// Indicates whether or not we should morph an element via onBeforeElUpdated callback\n// SEE: https://github.com/patrick-steele-idem/morphdom#morphdomfromnode-tonode-options--node\n//\nconst shouldMorph = operation => (fromEl, toEl) => {\n  return !shouldMorphCallbacks\n    .map(callback => {\n      return typeof callback === 'function'\n        ? callback(operation, fromEl, toEl)\n        : true\n    })\n    .includes(false)\n}\n\n// Execute any pluggable functions that modify elements after morphing via onElUpdated callback\n//\nconst didMorph = operation => el => {\n  didMorphCallbacks.forEach(callback => {\n    if (typeof callback === 'function') callback(operation, el)\n  })\n}\n\nconst verifyNotMutable = (detail, fromEl, toEl) => {\n  // Skip nodes that are equal:\n  // https://github.com/patrick-steele-idem/morphdom#can-i-make-morphdom-blaze-through-the-dom-tree-even-faster-yes\n  if (!mutableTags[fromEl.tagName] && fromEl.isEqualNode(toEl)) return false\n  return true\n}\n\nconst verifyNotContentEditable = (detail, fromEl, toEl) => {\n  if (fromEl === ActiveElement.element && fromEl.isContentEditable) return false\n  return true\n}\n\nconst verifyNotPermanent = (detail, fromEl, toEl) => {\n  const { permanentAttributeName } = detail\n  if (!permanentAttributeName) return true\n\n  const permanent = fromEl.closest(`[${permanentAttributeName}]`)\n\n  // only morph attributes on the active non-permanent text input\n  if (!permanent && fromEl === ActiveElement.element && isTextInput(fromEl)) {\n    const ignore = { value: true }\n    Array.from(toEl.attributes).forEach(attribute => {\n      if (!ignore[attribute.name])\n        fromEl.setAttribute(attribute.name, attribute.value)\n    })\n    return false\n  }\n\n  return !permanent\n}\n\nconst shouldMorphCallbacks = [\n  verifyNotMutable,\n  verifyNotPermanent,\n  verifyNotContentEditable\n]\nconst didMorphCallbacks = []\n\nexport {\n  shouldMorphCallbacks,\n  didMorphCallbacks,\n  shouldMorph,\n  didMorph,\n  verifyNotMutable,\n  verifyNotContentEditable,\n  verifyNotPermanent\n}\n","import morphdom from 'morphdom'\nimport { shouldMorph, didMorph } from './morph_callbacks'\nimport {\n  assignFocus,\n  dispatch,\n  getClassNames,\n  processElements,\n  before,\n  after,\n  operate,\n  safeString,\n  safeArray,\n  safeObject\n} from './utils'\n\nexport default {\n  // DOM Mutations\n\n  append: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { html, focusSelector } = operation\n        element.insertAdjacentHTML('beforeend', safeString(html))\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  graft: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { parent, focusSelector } = operation\n        const parentElement = document.querySelector(parent)\n        if (parentElement) {\n          parentElement.appendChild(element)\n          assignFocus(focusSelector)\n        }\n      })\n      after(element, operation)\n    })\n  },\n\n  innerHtml: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { html, focusSelector } = operation\n        element.innerHTML = safeString(html)\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  insertAdjacentHtml: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { html, position, focusSelector } = operation\n        element.insertAdjacentHTML(position || 'beforeend', safeString(html))\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  insertAdjacentText: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { text, position, focusSelector } = operation\n        element.insertAdjacentText(position || 'beforeend', safeString(text))\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  morph: operation => {\n    processElements(operation, element => {\n      const { html } = operation\n      const template = document.createElement('template')\n      template.innerHTML = String(html).trim()\n      operation.content = template.content\n      const parent = element.parentElement\n      const ordinal = Array.from(parent.children).indexOf(element)\n      before(element, operation)\n      operate(operation, () => {\n        const { childrenOnly, focusSelector } = operation\n        morphdom(\n          element,\n          childrenOnly ? template.content : template.innerHTML,\n          {\n            childrenOnly: !!childrenOnly,\n            onBeforeElUpdated: shouldMorph(operation),\n            onElUpdated: didMorph(operation)\n          }\n        )\n        assignFocus(focusSelector)\n      })\n      after(parent.children[ordinal], operation)\n    })\n  },\n\n  outerHtml: operation => {\n    processElements(operation, element => {\n      const parent = element.parentElement\n      const ordinal = Array.from(parent.children).indexOf(element)\n      before(element, operation)\n      operate(operation, () => {\n        const { html, focusSelector } = operation\n        element.outerHTML = safeString(html)\n        assignFocus(focusSelector)\n      })\n      after(parent.children[ordinal], operation)\n    })\n  },\n\n  prepend: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { html, focusSelector } = operation\n        element.insertAdjacentHTML('afterbegin', safeString(html))\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  remove: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { focusSelector } = operation\n        element.remove()\n        assignFocus(focusSelector)\n      })\n      after(document, operation)\n    })\n  },\n\n  replace: operation => {\n    processElements(operation, element => {\n      const parent = element.parentElement\n      const ordinal = Array.from(parent.children).indexOf(element)\n      before(element, operation)\n      operate(operation, () => {\n        const { html, focusSelector } = operation\n        element.outerHTML = safeString(html)\n        assignFocus(focusSelector)\n      })\n      after(parent.children[ordinal], operation)\n    })\n  },\n\n  textContent: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { text, focusSelector } = operation\n        element.textContent = safeString(text)\n        assignFocus(focusSelector)\n      })\n      after(element, operation)\n    })\n  },\n\n  // Element Property Mutations\n\n  addCssClass: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name } = operation\n        element.classList.add(...getClassNames([safeString(name)]))\n      })\n      after(element, operation)\n    })\n  },\n\n  removeAttribute: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name } = operation\n        element.removeAttribute(name)\n      })\n      after(element, operation)\n    })\n  },\n\n  removeCssClass: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name } = operation\n        element.classList.remove(...getClassNames([name]))\n      })\n      after(element, operation)\n    })\n  },\n\n  setAttribute: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name, value } = operation\n        element.setAttribute(name, safeString(value))\n      })\n      after(element, operation)\n    })\n  },\n\n  setDatasetProperty: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name, value } = operation\n        element.dataset[name] = safeString(value)\n      })\n      after(element, operation)\n    })\n  },\n\n  setProperty: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name, value } = operation\n        if (name in element) element[name] = safeString(value)\n      })\n      after(element, operation)\n    })\n  },\n\n  setStyle: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name, value } = operation\n        element.style[name] = safeString(value)\n      })\n      after(element, operation)\n    })\n  },\n\n  setStyles: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { styles } = operation\n        for (let [name, value] of Object.entries(styles))\n          element.style[name] = safeString(value)\n      })\n      after(element, operation)\n    })\n  },\n\n  setValue: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { value } = operation\n        element.value = safeString(value)\n      })\n      after(element, operation)\n    })\n  },\n\n  // DOM Events and Meta-Operations\n\n  dispatchEvent: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        const { name, detail } = operation\n        dispatch(element, name, detail)\n      })\n      after(element, operation)\n    })\n  },\n\n  invokeMethod: operation => {\n    processElements(operation, element => {\n      before(element, operation)\n      operate(operation, () => {\n        let firstObjectInChain\n        const { element, receiver, method, args } = operation\n        const chain = method.split('.')\n\n        switch (receiver) {\n          case 'window':\n            firstObjectInChain = window\n            break\n          case 'document':\n            firstObjectInChain = document\n            break\n          default:\n            firstObjectInChain = element\n        }\n        let lastObjectInChain = firstObjectInChain\n        const foundMethod = chain.reduce((lastTerm, nextTerm) => {\n          lastObjectInChain = lastTerm\n          return lastTerm[nextTerm] || {}\n        }, firstObjectInChain)\n\n        if (foundMethod instanceof Function) {\n          foundMethod.apply(lastObjectInChain, args || [])\n        } else {\n          console.warn(\n            `CableReady invoke_method operation failed due to missing '${method}' method for:`,\n            firstObjectInChain\n          )\n        }\n      })\n      after(element, operation)\n    })\n  },\n\n  setMeta: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { name, content } = operation\n      let meta = document.head.querySelector(`meta[name='${name}']`)\n      if (!meta) {\n        meta = document.createElement('meta')\n        meta.name = name\n        document.head.appendChild(meta)\n      }\n      meta.content = content\n    })\n    after(document, operation)\n  },\n\n  // Browser Manipulations\n\n  clearStorage: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { type } = operation\n      const storage = type === 'session' ? sessionStorage : localStorage\n      storage.clear()\n    })\n    after(document, operation)\n  },\n\n  go: operation => {\n    before(window, operation)\n    operate(operation, () => {\n      const { delta } = operation\n      history.go(delta)\n    })\n    after(window, operation)\n  },\n\n  pushState: operation => {\n    before(window, operation)\n    operate(operation, () => {\n      const { state, title, url } = operation\n      history.pushState(safeObject(state), safeString(title), url)\n    })\n    after(window, operation)\n  },\n\n  redirectTo: operation => {\n    before(window, operation)\n    operate(operation, () => {\n      let { url, action, turbo } = operation\n      action = action || 'advance'\n      if (typeof turbo === 'undefined') turbo = true\n\n      if (turbo) {\n        if (window.Turbo) window.Turbo.visit(url, { action })\n        if (window.Turbolinks) window.Turbolinks.visit(url, { action })\n        if (!window.Turbo && !window.Turbolinks) window.location.href = url\n      } else {\n        window.location.href = url\n      }\n    })\n    after(window, operation)\n  },\n\n  reload: operation => {\n    before(window, operation)\n    operate(operation, () => {\n      window.location.reload()\n    })\n    after(window, operation)\n  },\n\n  removeStorageItem: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { key, type } = operation\n      const storage = type === 'session' ? sessionStorage : localStorage\n      storage.removeItem(key)\n    })\n    after(document, operation)\n  },\n\n  replaceState: operation => {\n    before(window, operation)\n    operate(operation, () => {\n      const { state, title, url } = operation\n      history.replaceState(safeObject(state), safeString(title), url)\n    })\n    after(window, operation)\n  },\n\n  scrollIntoView: operation => {\n    const { element } = operation\n    before(element, operation)\n    operate(operation, () => {\n      element.scrollIntoView(operation)\n    })\n    after(element, operation)\n  },\n\n  setCookie: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { cookie } = operation\n      document.cookie = safeString(cookie)\n    })\n    after(document, operation)\n  },\n\n  setFocus: operation => {\n    const { element } = operation\n    before(element, operation)\n    operate(operation, () => {\n      assignFocus(element)\n    })\n    after(element, operation)\n  },\n\n  setStorageItem: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { key, value, type } = operation\n      const storage = type === 'session' ? sessionStorage : localStorage\n      storage.setItem(key, safeString(value))\n    })\n    after(document, operation)\n  },\n\n  // Notifications\n\n  consoleLog: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { message, level } = operation\n      level && ['warn', 'info', 'error'].includes(level)\n        ? console[level](message)\n        : console.log(message)\n    })\n    after(document, operation)\n  },\n\n  consoleTable: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { data, columns } = operation\n      console.table(data, safeArray(columns))\n    })\n    after(document, operation)\n  },\n\n  notification: operation => {\n    before(document, operation)\n    operate(operation, () => {\n      const { title, options } = operation\n      Notification.requestPermission().then(result => {\n        operation.permission = result\n        if (result === 'granted')\n          new Notification(safeString(title), safeObject(options))\n      })\n    })\n    after(document, operation)\n  }\n}\n","import Operations from './operations'\n\nlet operations = Operations\n\nconst add = newOperations => {\n  operations = { ...operations, ...newOperations }\n}\n\nconst addOperations = operations => {\n  add(operations)\n}\n\nconst addOperation = (name, operation) => {\n  const operations = {}\n  operations[name] = operation\n\n  add(operations)\n}\n\nexport { addOperation, addOperations }\n\nexport default {\n  get all () {\n    return operations\n  }\n}\n","import { xpathToElement, xpathToElementArray, dispatch } from './utils'\n\nimport ActiveElement from './active_element'\nimport OperationStore from './operation_store'\n\nconst perform = (\n  operations,\n  options = { emitMissingElementWarnings: true }\n) => {\n  const batches = {}\n  operations.forEach(operation => {\n    if (!!operation.batch)\n      batches[operation.batch] = batches[operation.batch]\n        ? ++batches[operation.batch]\n        : 1\n  })\n  operations.forEach(operation => {\n    const name = operation.operation\n    try {\n      if (operation.selector) {\n        if (operation.xpath) {\n          operation.element = operation.selectAll\n            ? xpathToElementArray(operation.selector)\n            : xpathToElement(operation.selector)\n        } else {\n          operation.element = operation.selectAll\n            ? document.querySelectorAll(operation.selector)\n            : document.querySelector(operation.selector)\n        }\n      } else {\n        operation.element = document\n      }\n      if (operation.element || options.emitMissingElementWarnings) {\n        ActiveElement.set(document.activeElement)\n        const cableReadyOperation = OperationStore.all[name]\n\n        if (cableReadyOperation) {\n          cableReadyOperation(operation)\n          if (!!operation.batch && --batches[operation.batch] === 0)\n            dispatch(document, 'cable-ready:batch-complete', {\n              batch: operation.batch\n            })\n        } else {\n          console.error(\n            `CableReady couldn't find the \"${name}\" operation. Make sure you use the camelized form when calling an operation method.`\n          )\n        }\n      }\n    } catch (e) {\n      if (operation.element) {\n        console.error(\n          `CableReady detected an error in ${name || 'operation'}: ${\n            e.message\n          }. If you need to support older browsers make sure you've included the corresponding polyfills. https://docs.stimulusreflex.com/setup#polyfills-for-ie11.`\n        )\n        console.error(e)\n      } else {\n        console.warn(\n          `CableReady ${name ||\n            'operation'} failed due to missing DOM element for selector: '${\n            operation.selector\n          }'`\n        )\n      }\n    }\n  })\n}\n\nconst performAsync = (\n  operations,\n  options = { emitMissingElementWarnings: true }\n) => {\n  return new Promise((resolve, reject) => {\n    try {\n      resolve(perform(operations, options))\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nexport { perform, performAsync }\n","let consumer\n\nconst BACKOFF = [25, 50, 75, 100, 200, 250, 500, 800, 1000, 2000]\n\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nconst getConsumerWithRetry = async (retry = 0) => {\n  if (consumer) return consumer\n\n  if (retry >= BACKOFF.length) {\n    throw new Error(\"Couldn't obtain a Action Cable consumer within 5s\")\n  }\n\n  await wait(BACKOFF[retry])\n\n  return await getConsumerWithRetry(retry + 1)\n}\n\nexport default {\n  setConsumer (value) {\n    consumer = value\n  },\n\n  get consumer () {\n    return consumer\n  },\n\n  async getConsumer () {\n    return await getConsumerWithRetry()\n  }\n}\n","export default class SubscribingElement extends HTMLElement {\n  disconnectedCallback () {\n    if (this.channel) this.channel.unsubscribe()\n  }\n\n  createSubscription (consumer, channel, receivedCallback) {\n    this.channel = consumer.subscriptions.create(\n      {\n        channel,\n        identifier: this.identifier\n      },\n      {\n        received: receivedCallback\n      }\n    )\n  }\n\n  get preview () {\n    return (\n      document.documentElement.hasAttribute('data-turbolinks-preview') ||\n      document.documentElement.hasAttribute('data-turbo-preview')\n    )\n  }\n\n  get identifier () {\n    return this.getAttribute('identifier')\n  }\n}\n","import { perform } from '../cable_ready'\nimport SubscribingElement from './subscribing_element'\nimport CableConsumer from '../cable_consumer'\n\nexport default class StreamFromElement extends SubscribingElement {\n  async connectedCallback () {\n    if (this.preview) return\n\n    const consumer = await CableConsumer.getConsumer()\n\n    if (consumer) {\n      this.createSubscription(\n        consumer,\n        'CableReady::Stream',\n        this.performOperations\n      )\n    } else {\n      console.error(\n        'The `stream_from` helper cannot connect without an ActionCable consumer.\\nPlease run `rails generate cable_ready:helpers` to fix this.'\n      )\n    }\n  }\n\n  performOperations (data) {\n    if (data.cableReady) perform(data.operations)\n  }\n}\n","import morphdom from 'morphdom'\n\nimport SubscribingElement from './subscribing_element'\n\nimport { shouldMorph } from '../morph_callbacks'\nimport { debounce, assignFocus, dispatch, graciouslyFetch } from '../utils'\n\nimport ActiveElement from '../active_element'\nimport CableConsumer from '../cable_consumer'\n\nconst template = `\n<style>\n  :host {\n    display: block;\n  }\n</style>\n<slot></slot>\n`\n\nfunction url (element) {\n  return element.hasAttribute('url')\n    ? element.getAttribute('url')\n    : location.href\n}\n\nexport default class UpdatesForElement extends SubscribingElement {\n  constructor () {\n    super()\n    const shadowRoot = this.attachShadow({ mode: 'open' })\n    shadowRoot.innerHTML = template\n  }\n\n  async connectedCallback () {\n    if (this.preview) return\n    this.update = debounce(this.update.bind(this), this.debounce)\n\n    const consumer = await CableConsumer.getConsumer()\n\n    if (consumer) {\n      this.createSubscription(consumer, 'CableReady::Stream', this.update)\n    } else {\n      console.error(\n        'The `updates-for` helper cannot connect without an ActionCable consumer.\\nPlease run `rails generate cable_ready:helpers` to fix this.'\n      )\n    }\n  }\n\n  async update (data) {\n    const blocks = Array.from(\n      document.querySelectorAll(this.query),\n      element => new Block(element)\n    )\n\n    // first updates-for element in the DOM *at any given moment* updates all of the others\n    if (blocks[0].element !== this) return\n\n    // hold a reference to the active element so that it can be restored after the morph\n    ActiveElement.set(document.activeElement)\n\n    // store all retrieved HTML in an object keyed by URL to minimize fetch calls\n    this.html = {}\n\n    const uniqueUrls = [...new Set(blocks.map(block => block.url))]\n\n    await Promise.all(\n      uniqueUrls.map(async url => {\n        if (!this.html.hasOwnProperty(url)) {\n          const response = await graciouslyFetch(url, {\n            'X-Cable-Ready': 'update'\n          })\n          this.html[url] = await response.text()\n        }\n      })\n    )\n\n    // track current block index for each URL; referred to as fragments\n    this.index = {}\n\n    blocks.forEach(block => {\n      // if the block's URL is not in the index, initialize it to 0; otherwise, increment it\n      this.index.hasOwnProperty(block.url)\n        ? this.index[block.url]++\n        : (this.index[block.url] = 0)\n\n      block.process(data, this.html, this.index)\n    })\n  }\n\n  get query () {\n    return `updates-for[identifier=\"${this.identifier}\"]`\n  }\n\n  get identifier () {\n    return this.getAttribute('identifier')\n  }\n\n  get debounce () {\n    return this.hasAttribute('debounce')\n      ? parseInt(this.getAttribute('debounce'))\n      : 20\n  }\n}\n\nclass Block {\n  constructor (element) {\n    this.element = element\n  }\n\n  async process (data, html, index) {\n    // with the index incremented, we can now safely bail - before a fetch - if there's no work to be done\n    if (!this.shouldUpdate(data)) return\n\n    const blockIndex = index[this.url]\n    const template = document.createElement('template')\n    this.element.setAttribute('updating', 'updating')\n\n    template.innerHTML = String(html[this.url]).trim()\n\n    await this.resolveTurboFrames(template.content)\n\n    const fragments = template.content.querySelectorAll(this.query)\n\n    if (fragments.length <= blockIndex) {\n      console.warn(\n        `Update aborted due to insufficient number of elements. The offending url is ${this.url}.`\n      )\n      return\n    }\n\n    const operation = {\n      element: this.element,\n      html: fragments[blockIndex],\n      permanentAttributeName: 'data-ignore-updates'\n    }\n\n    dispatch(this.element, 'cable-ready:before-update', operation)\n    morphdom(this.element, fragments[blockIndex], {\n      childrenOnly: true,\n      onBeforeElUpdated: shouldMorph(operation),\n      onElUpdated: _ => {\n        this.element.removeAttribute('updating')\n        dispatch(this.element, 'cable-ready:after-update', operation)\n        assignFocus(operation.focusSelector)\n      }\n    })\n  }\n\n  async resolveTurboFrames (documentFragment) {\n    const reloadingTurboFrames = [\n      ...documentFragment.querySelectorAll(\n        'turbo-frame[src]:not([loading=\"lazy\"])'\n      )\n    ]\n\n    return Promise.all(\n      reloadingTurboFrames.map(frame => {\n        return new Promise(async resolve => {\n          const frameResponse = await graciouslyFetch(\n            frame.getAttribute('src'),\n            {\n              'Turbo-Frame': frame.id,\n              'X-Cable-Ready': 'update'\n            }\n          )\n\n          const frameTemplate = document.createElement('template')\n          frameTemplate.innerHTML = await frameResponse.text()\n\n          // recurse here to get all nested eager loaded frames\n          await this.resolveTurboFrames(frameTemplate.content)\n\n          documentFragment.querySelector(\n            `turbo-frame#${frame.id}`\n          ).innerHTML = String(\n            frameTemplate.content.querySelector(`turbo-frame#${frame.id}`)\n              .innerHTML\n          ).trim()\n\n          resolve()\n        })\n      })\n    )\n  }\n\n  shouldUpdate (data) {\n    // if everything that could prevent an update is false, update this block\n    return !this.ignoresInnerUpdates && this.hasChangesSelectedForUpdate(data)\n  }\n\n  hasChangesSelectedForUpdate (data) {\n    // if there's an only attribute, only update if at least one of the attributes changed is in the allow list\n    const only = this.element.getAttribute('only')\n\n    return !(\n      only &&\n      data.changed &&\n      !only.split(' ').some(attribute => data.changed.includes(attribute))\n    )\n  }\n\n  get ignoresInnerUpdates () {\n    // don't update during a Reflex or Turbolinks redraw\n    return (\n      this.element.hasAttribute('ignore-inner-updates') &&\n      this.element.hasAttribute('performing-inner-update')\n    )\n  }\n\n  get url () {\n    return this.element.hasAttribute('url')\n      ? this.element.getAttribute('url')\n      : location.href\n  }\n\n  get identifier () {\n    return this.element.identifier\n  }\n\n  get query () {\n    return this.element.query\n  }\n}\n","export const registerInnerUpdates = () => {\n  document.addEventListener('stimulus-reflex:before', event => {\n    recursiveMarkUpdatesForElements(event.detail.element)\n  })\n\n  document.addEventListener('stimulus-reflex:after', event => {\n    setTimeout(() => {\n      recursiveUnmarkUpdatesForElements(event.detail.element)\n    })\n  })\n\n  document.addEventListener('turbo:submit-start', event => {\n    recursiveMarkUpdatesForElements(event.target)\n  })\n\n  document.addEventListener('turbo:submit-end', event => {\n    setTimeout(() => {\n      recursiveUnmarkUpdatesForElements(event.target)\n    })\n  })\n}\n\nconst recursiveMarkUpdatesForElements = leaf => {\n  const closestUpdatesFor =\n    leaf && leaf.parentElement && leaf.parentElement.closest('updates-for')\n  if (closestUpdatesFor) {\n    closestUpdatesFor.setAttribute('performing-inner-update', '')\n    recursiveMarkUpdatesForElements(closestUpdatesFor)\n  }\n}\n\nconst recursiveUnmarkUpdatesForElements = leaf => {\n  const closestUpdatesFor =\n    leaf && leaf.parentElement && leaf.parentElement.closest('updates-for')\n  if (closestUpdatesFor) {\n    closestUpdatesFor.removeAttribute('performing-inner-update')\n    recursiveUnmarkUpdatesForElements(closestUpdatesFor)\n  }\n}\n","import packageInfo from '../package.json'\nimport { perform, performAsync } from './cable_ready'\nimport { initialize } from './elements'\nimport { shouldMorphCallbacks, didMorphCallbacks } from './morph_callbacks'\n\nimport * as MorphCallbacks from './morph_callbacks'\nimport * as Utils from './utils'\n\nimport OperationStore, { addOperation, addOperations } from './operation_store'\nimport StreamFromElement from './elements/stream_from_element'\nimport UpdatesForElement from './elements/updates_for_element'\nimport SubscribingElement from './elements/subscribing_element'\nimport CableConsumer from './cable_consumer'\n\nexport {\n  Utils,\n  MorphCallbacks,\n  StreamFromElement,\n  UpdatesForElement,\n  SubscribingElement\n}\n\nconst global = {\n  perform,\n  performAsync,\n  shouldMorphCallbacks,\n  didMorphCallbacks,\n  initialize,\n  addOperation,\n  addOperations,\n  version: packageInfo.version,\n  cable: CableConsumer,\n  get DOMOperations () {\n    console.warn(\n      'DEPRECATED: Please use `CableReady.operations` instead of `CableReady.DOMOperations`'\n    )\n    return OperationStore.all\n  },\n  get operations () {\n    return OperationStore.all\n  },\n  get consumer () {\n    return CableConsumer.consumer\n  }\n}\n\nwindow.CableReady = global\n\nexport default global\n","import CableConsumer from '../cable_consumer'\n\nimport StreamFromElement from './stream_from_element'\nimport UpdatesForElement from './updates_for_element'\n\nimport { registerInnerUpdates } from '../updatable/inner_updates_compat'\n\nconst initialize = (initializeOptions = {}) => {\n  const { consumer } = initializeOptions\n\n  registerInnerUpdates()\n\n  if (consumer) {\n    CableConsumer.setConsumer(consumer)\n  } else {\n    console.error(\n      'CableReady requires a reference to your Action Cable `consumer` for its helpers to function.\\nEnsure that you have imported the `CableReady` package as well as `consumer` from your `channels` folder, then call `CableReady.initialize({ consumer })`.'\n    )\n  }\n\n  if (!customElements.get('stream-from')) {\n    customElements.define('stream-from', StreamFromElement)\n  }\n\n  if (!customElements.get('updates-for')) {\n    customElements.define('updates-for', UpdatesForElement)\n  }\n}\n\nexport { initialize }\n"],"names":["inputTags","INPUT","TEXTAREA","SELECT","mutableTags","OPTION","textInputTypes","color","date","datetime","email","month","number","password","range","search","tel","text","textarea","time","url","week","activeElement","ActiveElement","element","set","isTextInput","tagName","type","assignFocus","selector","focusElement","nodeType","Node","ELEMENT_NODE","document","querySelector","focus","dispatch","name","detail","evt","CustomEvent","bubbles","cancelable","dispatchEvent","window","jQuery","trigger","xpathToElement","xpath","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","xpathToElementArray","result","ORDERED_NODE_SNAPSHOT_TYPE","elements","i","snapshotLength","push","snapshotItem","getClassNames","names","Array","from","flat","processElements","operation","callback","selectAll","forEach","kebabize","str","split","map","letter","idx","toUpperCase","toLowerCase","join","operate","cancel","delay","setTimeout","before","target","after","debounce","func","timeout","timer","args","clearTimeout","apply","this","handleErrors","response","ok","Error","statusText","safeString","console","warn","String","safeArray","arr","isArray","safeObject","obj","Object","async","graciouslyFetch","additionalHeaders","fetch","headers","undefined","e","error","shouldMorph","fromEl","toEl","shouldMorphCallbacks","includes","didMorph","el","didMorphCallbacks","verifyNotMutable","isEqualNode","verifyNotContentEditable","isContentEditable","verifyNotPermanent","permanentAttributeName","permanent","closest","ignore","value","attributes","attribute","setAttribute","Operations","append","html","focusSelector","insertAdjacentHTML","graft","parent","parentElement","appendChild","innerHtml","innerHTML","insertAdjacentHtml","position","insertAdjacentText","morph","template","createElement","trim","content","ordinal","children","indexOf","childrenOnly","morphdom","onBeforeElUpdated","onElUpdated","outerHtml","outerHTML","prepend","remove","replace","textContent","addCssClass","classList","add","removeAttribute","removeCssClass","setDatasetProperty","dataset","setProperty","setStyle","style","setStyles","styles","entries","setValue","invokeMethod","firstObjectInChain","receiver","method","chain","lastObjectInChain","foundMethod","reduce","lastTerm","nextTerm","Function","setMeta","meta","head","clearStorage","sessionStorage","localStorage","clear","go","delta","history","pushState","state","title","redirectTo","action","turbo","Turbo","visit","Turbolinks","location","href","reload","removeStorageItem","key","removeItem","replaceState","scrollIntoView","setCookie","cookie","setFocus","setStorageItem","setItem","consoleLog","message","level","log","consoleTable","data","columns","table","notification","options","Notification","requestPermission","then","permission","operations","newOperations","OperationStore","all","perform","emitMissingElementWarnings","batches","batch","querySelectorAll","cableReadyOperation","consumer","BACKOFF","getConsumerWithRetry","retry","length","ms","Promise","resolve","CableConsumer","setConsumer","SubscribingElement","HTMLElement","disconnectedCallback","channel","unsubscribe","createSubscription","receivedCallback","subscriptions","create","identifier","received","preview","documentElement","hasAttribute","getAttribute","StreamFromElement","getConsumer","performOperations","cableReady","UpdatesForElement","constructor","super","attachShadow","mode","update","bind","blocks","query","Block","uniqueUrls","Set","block","hasOwnProperty","index","process","parseInt","shouldUpdate","blockIndex","resolveTurboFrames","fragments","_","documentFragment","reloadingTurboFrames","frame","frameResponse","id","frameTemplate","ignoresInnerUpdates","hasChangesSelectedForUpdate","only","changed","some","recursiveMarkUpdatesForElements","leaf","closestUpdatesFor","recursiveUnmarkUpdatesForElements","global","performAsync","reject","err","initialize","initializeOptions","addEventListener","event","customElements","get","define","addOperation","addOperations","version","packageInfo","cable","DOMOperations","CableReady"],"mappings":"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"}